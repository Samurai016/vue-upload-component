{"version":3,"file":"vue-upload-component.min.js","sources":["../src/utils/request.js","../src/chunk/ChunkUploadHandler.js","../node_modules/vue-runtime-helpers/dist/normalize-component.js","../src/FileUpload.vue","../node_modules/vue-runtime-helpers/dist/inject-style/browser.js"],"sourcesContent":["/**\r\n * Creates a XHR request\r\n *\r\n * @param {Object} options\r\n */\r\nexport const createRequest = (options) => {\r\n  const xhr = new XMLHttpRequest()\r\n  xhr.open(options.method || 'GET', options.url)\r\n  xhr.responseType = 'json'\r\n  if (options.headers) {\r\n    Object.keys(options.headers).forEach(key => {\r\n      xhr.setRequestHeader(key, options.headers[key])\r\n    })\r\n  }\r\n\r\n  return xhr\r\n}\r\n\r\n/**\r\n * Sends a XHR request with certain body\r\n *\r\n * @param {XMLHttpRequest} xhr\r\n * @param {Object} body\r\n */\r\nexport const sendRequest = (xhr, body) => {\r\n  return new Promise((resolve, reject) => {\r\n    xhr.onload = () => {\r\n      if (xhr.status >= 200 && xhr.status < 300) {\r\n        var response\r\n        try {\r\n          response = JSON.parse(xhr.response)\r\n        } catch (err) {\r\n          response = xhr.response\r\n        }\r\n        resolve(response)\r\n      } else {\r\n        reject(xhr.response)\r\n      }\r\n    }\r\n    xhr.onerror = () => reject(xhr.response)\r\n    xhr.send(JSON.stringify(body))\r\n  })\r\n}\r\n\r\n/**\r\n * Sends a XHR request with certain form data\r\n *\r\n * @param {XMLHttpRequest} xhr\r\n * @param {Object} data\r\n */\r\nexport const sendFormRequest = (xhr, data) => {\r\n  const body = new FormData()\r\n  for (var name in data) {\r\n    body.append(name, data[name])\r\n  }\r\n\r\n  return new Promise((resolve, reject) => {\r\n    xhr.onload = () => {\r\n      if (xhr.status >= 200 && xhr.status < 300) {\r\n        var response\r\n        try {\r\n          response = JSON.parse(xhr.response)\r\n        } catch (err) {\r\n          response = xhr.response\r\n        }\r\n        resolve(response)\r\n      } else {\r\n        reject(xhr.response)\r\n      }\r\n    }\r\n    xhr.onerror = () => reject(xhr.response)\r\n    xhr.send(body)\r\n  })\r\n}\r\n\r\n/**\r\n * Creates and sends XHR request\r\n *\r\n * @param {Object} options\r\n *\r\n * @returns Promise\r\n */\r\nexport default function (options) {\r\n  const xhr = createRequest(options)\r\n\r\n  return sendRequest(xhr, options.body)\r\n}\r\n","import {\r\n  default as request,\r\n  createRequest,\r\n  sendFormRequest\r\n} from '../utils/request'\r\n\r\nexport default class ChunkUploadHandler {\r\n  /**\r\n   * Constructor\r\n   *\r\n   * @param {File} file\r\n   * @param {Object} options\r\n   */\r\n  constructor(file, options) {\r\n    this.file = file\r\n    this.options = options\r\n    this.chunks = []\r\n    this.sessionId = null\r\n    this.chunkSize = null\r\n    this.speedInterval = null\r\n  }\r\n\r\n  /**\r\n   * Gets the max retries from options\r\n   */\r\n  get maxRetries() {\r\n    return parseInt(this.options.maxRetries, 10)\r\n  }\r\n\r\n  /**\r\n   * Gets the max number of active chunks being uploaded at once from options\r\n   */\r\n  get maxActiveChunks() {\r\n    return parseInt(this.options.maxActive, 10)\r\n  }\r\n\r\n  /**\r\n   * Gets the file type\r\n   */\r\n  get fileType() {\r\n    return this.file.type\r\n  }\r\n\r\n  /**\r\n   * Gets the file size\r\n   */\r\n  get fileSize() {\r\n    return this.file.size\r\n  }\r\n\r\n  /**\r\n   * Gets the file name\r\n   */\r\n  get fileName() {\r\n    return this.file.name\r\n  }\r\n\r\n  /**\r\n   * Gets action (url) to upload the file\r\n   */\r\n  get action() {\r\n    return this.options.action || null\r\n  }\r\n\r\n  /**\r\n   * Gets the body to be merged when sending the request in start phase\r\n   */\r\n  get startBody() {\r\n    return this.options.startBody || {}\r\n  }\r\n\r\n  /**\r\n   * Gets the body to be merged when sending the request in upload phase\r\n   */\r\n  get uploadBody() {\r\n    return this.options.uploadBody || {}\r\n  }\r\n\r\n  /**\r\n   * Gets the body to be merged when sending the request in finish phase\r\n   */\r\n  get finishBody() {\r\n    return this.options.finishBody || {}\r\n  }\r\n\r\n  /**\r\n   * Gets the headers of the requests from options\r\n   */\r\n  get headers() {\r\n    return this.options.headers || {}\r\n  }\r\n\r\n  /**\r\n   * Whether it's ready to upload files or not\r\n   */\r\n  get readyToUpload() {\r\n    return !!this.chunks\r\n  }\r\n\r\n  /**\r\n   * Gets the progress of the chunk upload\r\n   * - Gets all the completed chunks\r\n   * - Gets the progress of all the chunks that are being uploaded\r\n   */\r\n  get progress() {\r\n    const completedProgress = (this.chunksUploaded.length / this.chunks.length) * 100\r\n    const uploadingProgress = this.chunksUploading.reduce((progress, chunk) => {\r\n      return progress + ((chunk.progress | 0) / this.chunks.length)\r\n    }, 0)\r\n\r\n    return Math.min(completedProgress + uploadingProgress, 100)\r\n  }\r\n\r\n  /**\r\n   * Gets all the chunks that are pending to be uploaded\r\n   */\r\n  get chunksToUpload() {\r\n    return this.chunks.filter(chunk => {\r\n      return !chunk.active && !chunk.uploaded\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Whether there are chunks to upload or not\r\n   */\r\n  get hasChunksToUpload() {\r\n    return this.chunksToUpload.length > 0\r\n  }\r\n\r\n  /**\r\n   * Gets all the chunks that are uploading\r\n   */\r\n  get chunksUploading() {\r\n    return this.chunks.filter(chunk => {\r\n      return !!chunk.xhr && !!chunk.active\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Gets all the chunks that have finished uploading\r\n   */\r\n  get chunksUploaded() {\r\n    return this.chunks.filter(chunk => {\r\n      return !!chunk.uploaded\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Creates all the chunks in the initial state\r\n   */\r\n  createChunks() {\r\n    this.chunks = []\r\n\r\n    let start = 0\r\n    let end = this.chunkSize\r\n    while (start < this.fileSize) {\r\n      this.chunks.push({\r\n        blob: this.file.file.slice(start, end),\r\n        startOffset: start,\r\n        active: false,\r\n        retries: this.maxRetries\r\n      })\r\n      start = end\r\n      end = start + this.chunkSize\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Updates the progress of the file with the handler's progress\r\n   */\r\n  updateFileProgress() {\r\n    this.file.progress = this.progress\r\n  }\r\n\r\n  /**\r\n   * Paues the upload process\r\n   * - Stops all active requests\r\n   * - Sets the file not active\r\n   */\r\n  pause() {\r\n    this.file.active = false\r\n    this.stopChunks()\r\n  }\r\n\r\n  /**\r\n   * Stops all the current chunks\r\n   */\r\n  stopChunks() {\r\n    this.chunksUploading.forEach(chunk => {\r\n      chunk.xhr.abort()\r\n      chunk.active = false\r\n    })\r\n\r\n    this.stopSpeedCalc()\r\n  }\r\n\r\n  /**\r\n   * Resumes the file upload\r\n   * - Sets the file active\r\n   * - Starts the following chunks\r\n   */\r\n  resume() {\r\n    this.file.active = true\r\n    this.startChunking()\r\n  }\r\n\r\n  /**\r\n   * Starts the file upload\r\n   *\r\n   * @returns Promise\r\n   * - resolve  The file was uploaded\r\n   * - reject   The file upload failed\r\n   */\r\n  upload() {\r\n    this.promise = new Promise((resolve, reject) => {\r\n      this.resolve = resolve\r\n      this.reject = reject\r\n    })\r\n    this.start()\r\n\r\n    return this.promise\r\n  }\r\n\r\n  /**\r\n   * Start phase\r\n   * Sends a request to the backend to initialise the chunks\r\n   */\r\n  start() {\r\n    request({\r\n      method: 'POST',\r\n      headers: Object.assign({}, this.headers, {\r\n        'Content-Type': 'application/json'\r\n      }),\r\n      url: this.action,\r\n      body: Object.assign(this.startBody, {\r\n        phase: 'start',\r\n        mime_type: this.fileType,\r\n        size: this.fileSize,\r\n        name: this.fileName\r\n      })\r\n    }).then(res => {\r\n      if (res.status !== 'success') {\r\n        this.file.response = res\r\n        return this.reject('server')\r\n      }\r\n\r\n      this.sessionId = res.data.session_id\r\n      this.chunkSize = res.data.end_offset\r\n\r\n      this.createChunks()\r\n      this.startChunking()\r\n    }).catch(res => {\r\n      this.file.response = res\r\n      this.reject('server')\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Starts to upload chunks\r\n   */\r\n  startChunking() {\r\n    for (let i = 0; i < this.maxActiveChunks; i++) {\r\n      this.uploadNextChunk()\r\n    }\r\n\r\n    this.startSpeedCalc()\r\n  }\r\n\r\n  /**\r\n   * Uploads the next chunk\r\n   * - Won't do anything if the process is paused\r\n   * - Will start finish phase if there are no more chunks to upload\r\n   */\r\n  uploadNextChunk() {\r\n    if (this.file.active) {\r\n      if (this.hasChunksToUpload) {\r\n        return this.uploadChunk(this.chunksToUpload[0])\r\n      }\r\n\r\n      if (this.chunksUploading.length === 0) {\r\n        return this.finish()\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Uploads a chunk\r\n   * - Sends the chunk to the backend\r\n   * - Sets the chunk as uploaded if everything went well\r\n   * - Decreases the number of retries if anything went wrong\r\n   * - Fails if there are no more retries\r\n   *\r\n   * @param {Object} chunk\r\n   */\r\n  uploadChunk(chunk) {\r\n    chunk.progress = 0\r\n    chunk.active = true\r\n    this.updateFileProgress()\r\n    chunk.xhr = createRequest({\r\n      method: 'POST',\r\n      headers: this.headers,\r\n      url: this.action\r\n    })\r\n\r\n    chunk.xhr.upload.addEventListener('progress', function (evt) {\r\n      if (evt.lengthComputable) {\r\n        chunk.progress = Math.round(evt.loaded / evt.total * 100)\r\n      }\r\n    }, false)\r\n\r\n    sendFormRequest(chunk.xhr, Object.assign(this.uploadBody, {\r\n      phase: 'upload',\r\n      session_id: this.sessionId,\r\n      start_offset: chunk.startOffset,\r\n      chunk: chunk.blob\r\n    })).then(res => {\r\n      chunk.active = false\r\n      if (res.status === 'success') {\r\n        chunk.uploaded = true\r\n      } else {\r\n        if (chunk.retries-- <= 0) {\r\n          this.stopChunks()\r\n          return this.reject('upload')\r\n        }\r\n      }\r\n\r\n      this.uploadNextChunk()\r\n    }).catch(() => {\r\n      chunk.active = false\r\n      if (chunk.retries-- <= 0) {\r\n        this.stopChunks()\r\n        return this.reject('upload')\r\n      }\r\n\r\n      this.uploadNextChunk()\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Finish phase\r\n   * Sends a request to the backend to finish the process\r\n   */\r\n  finish() {\r\n    this.updateFileProgress()\r\n    this.stopSpeedCalc()\r\n\r\n    request({\r\n      method: 'POST',\r\n      headers: Object.assign({}, this.headers, {\r\n        'Content-Type': 'application/json'\r\n      }),\r\n      url: this.action,\r\n      body: Object.assign(this.finishBody, {\r\n        phase: 'finish',\r\n        session_id: this.sessionId\r\n      })\r\n    }).then(res => {\r\n      this.file.response = res\r\n      if (res.status !== 'success') {\r\n        return this.reject('server')\r\n      }\r\n\r\n      this.resolve(res)\r\n    }).catch(res => {\r\n      this.file.response = res\r\n      this.reject('server')\r\n    })\r\n  }\r\n\r\n\r\n  /**\r\n   * Sets an interval to calculate and\r\n   * set upload speed every 3 seconds\r\n   */\r\n  startSpeedCalc() {\r\n    this.file.speed = 0\r\n    let lastUploadedBytes = 0\r\n    if (!this.speedInterval) {\r\n      this.speedInterval = window.setInterval(() => {\r\n        let uploadedBytes = (this.progress / 100) * this.fileSize\r\n        this.file.speed = (uploadedBytes - lastUploadedBytes)\r\n        lastUploadedBytes = uploadedBytes\r\n      }, 1000)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Removes the upload speed interval\r\n   */\r\n  stopSpeedCalc() {\r\n    this.speedInterval && window.clearInterval(this.speedInterval)\r\n    this.speedInterval = null\r\n    this.file.speed = 0\r\n  }\r\n}\r\n","'use strict';\n\nfunction normalizeComponent(template, style, script, scopeId, isFunctionalTemplate, moduleIdentifier\n/* server only */\n, shadowMode, createInjector, createInjectorSSR, createInjectorShadow) {\n  if (typeof shadowMode !== 'boolean') {\n    createInjectorSSR = createInjector;\n    createInjector = shadowMode;\n    shadowMode = false;\n  } // Vue.extend constructor export interop.\n\n\n  var options = typeof script === 'function' ? script.options : script; // render functions\n\n  if (template && template.render) {\n    options.render = template.render;\n    options.staticRenderFns = template.staticRenderFns;\n    options._compiled = true; // functional template\n\n    if (isFunctionalTemplate) {\n      options.functional = true;\n    }\n  } // scopedId\n\n\n  if (scopeId) {\n    options._scopeId = scopeId;\n  }\n\n  var hook;\n\n  if (moduleIdentifier) {\n    // server build\n    hook = function hook(context) {\n      // 2.3 injection\n      context = context || // cached call\n      this.$vnode && this.$vnode.ssrContext || // stateful\n      this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext; // functional\n      // 2.2 with runInNewContext: true\n\n      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {\n        context = __VUE_SSR_CONTEXT__;\n      } // inject component styles\n\n\n      if (style) {\n        style.call(this, createInjectorSSR(context));\n      } // register component module identifier for async chunk inference\n\n\n      if (context && context._registeredComponents) {\n        context._registeredComponents.add(moduleIdentifier);\n      }\n    }; // used by ssr in case component is cached and beforeCreate\n    // never gets called\n\n\n    options._ssrRegister = hook;\n  } else if (style) {\n    hook = shadowMode ? function () {\n      style.call(this, createInjectorShadow(this.$root.$options.shadowRoot));\n    } : function (context) {\n      style.call(this, createInjector(context));\n    };\n  }\n\n  if (hook) {\n    if (options.functional) {\n      // register for functional component in vue file\n      var originalRender = options.render;\n\n      options.render = function renderWithStyleInjection(h, context) {\n        hook.call(context);\n        return originalRender(h, context);\n      };\n    } else {\n      // inject component registration as beforeCreate hook\n      var existing = options.beforeCreate;\n      options.beforeCreate = existing ? [].concat(existing, hook) : [hook];\n    }\n  }\n\n  return script;\n}\n\nmodule.exports = normalizeComponent;\n//# sourceMappingURL=normalize-component.js.map\n","<template>\r\n  <span :class=\"className\">\r\n    <slot></slot>\r\n    <label :for=\"inputId || name\"></label>\r\n    <input-file></input-file>\r\n  </span>\r\n</template>\r\n<style>\r\n.file-uploads {\r\n  overflow: hidden;\r\n  position: relative;\r\n  text-align: center;\r\n  display: inline-block;\r\n}\r\n.file-uploads.file-uploads-html4 input, .file-uploads.file-uploads-html5 label {\r\n  /* background fix ie  click */\r\n  background: #fff;\r\n  opacity: 0;\r\n  font-size: 20em;\r\n  z-index: 1;\r\n  top: 0;\r\n  left: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  position: absolute;\r\n  width: 100%;\r\n  height: 100%;\r\n}\r\n.file-uploads.file-uploads-html5 input, .file-uploads.file-uploads-html4 label {\r\n  /* background fix ie  click */\r\n  background: rgba(255, 255, 255, 0);\r\n  overflow: hidden;\r\n  position: fixed;\r\n  width: 1px;\r\n  height: 1px;\r\n  z-index: -1;\r\n  opacity: 0;\r\n}\r\n</style>\r\n<script>\r\nimport ChunkUploadDefaultHandler from './chunk/ChunkUploadHandler'\r\nimport InputFile from './InputFile.vue'\r\n\r\nconst CHUNK_DEFAULT_OPTIONS = {\r\n  headers: {},\r\n  action: '',\r\n  minSize: 1048576,\r\n  maxActive: 3,\r\n  maxRetries: 5,\r\n\r\n  handler: ChunkUploadDefaultHandler\r\n}\r\n\r\nexport default {\r\n  components: {\r\n    InputFile,\r\n  },\r\n  props: {\r\n    inputId: {\r\n      type: String,\r\n    },\r\n\r\n    name: {\r\n      type: String,\r\n      default: 'file',\r\n    },\r\n\r\n    accept: {\r\n      type: String,\r\n    },\r\n\r\n    capture: {\r\n    },\r\n\r\n    disabled: {\r\n    },\r\n\r\n    multiple: {\r\n      type: Boolean,\r\n    },\r\n\r\n    maximum: {\r\n      type: Number,\r\n      default() {\r\n        return this.multiple ? 0 : 1\r\n      }\r\n    },\r\n\r\n    addIndex: {\r\n      type: [Boolean, Number],\r\n    },\r\n\r\n    directory: {\r\n      type: Boolean,\r\n    },\r\n\r\n    postAction: {\r\n      type: String,\r\n    },\r\n\r\n    putAction: {\r\n      type: String,\r\n    },\r\n\r\n    customAction: {\r\n      type: Function,\r\n    },\r\n\r\n    headers: {\r\n      type: Object,\r\n      default: Object,\r\n    },\r\n\r\n    data: {\r\n      type: Object,\r\n      default: Object,\r\n    },\r\n\r\n    timeout: {\r\n      type: Number,\r\n      default: 0,\r\n    },\r\n\r\n\r\n    drop: {\r\n      default: false,\r\n    },\r\n\r\n    dropDirectory: {\r\n      type: Boolean,\r\n      default: true,\r\n    },\r\n\r\n    size: {\r\n      type: Number,\r\n      default: 0,\r\n    },\r\n\r\n    extensions: {\r\n      default: Array,\r\n    },\r\n\r\n\r\n    value: {\r\n      type: Array,\r\n      default: Array,\r\n    },\r\n\r\n    thread: {\r\n      type: Number,\r\n      default: 1,\r\n    },\r\n\r\n    // Chunk upload enabled\r\n    chunkEnabled: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n\r\n    // Chunk upload properties\r\n    chunk: {\r\n      type: Object,\r\n      default: () => {\r\n        return CHUNK_DEFAULT_OPTIONS\r\n      }\r\n    }\r\n  },\r\n\r\n  data() {\r\n    return {\r\n      files: this.value,\r\n      features: {\r\n        html5: true,\r\n        directory: false,\r\n        drop: false,\r\n      },\r\n\r\n      active: false,\r\n      dropActive: false,\r\n\r\n      uploading: 0,\r\n\r\n      destroy: false,\r\n    }\r\n  },\r\n\r\n\r\n  /**\r\n   * mounted\r\n   * @return {[type]} [description]\r\n   */\r\n  mounted() {\r\n    let input = document.createElement('input')\r\n    input.type = 'file'\r\n    input.multiple = true\r\n\r\n    // html5 特征\r\n    if (window.FormData && input.files) {\r\n      // 上传目录特征\r\n      if (typeof input.webkitdirectory === 'boolean' || typeof input.directory === 'boolean') {\r\n        this.features.directory = true\r\n      }\r\n\r\n      // 拖拽特征\r\n      if (this.features.html5 && typeof input.ondrop !== 'undefined') {\r\n        this.features.drop = true\r\n      }\r\n    } else {\r\n      this.features.html5 = false\r\n    }\r\n\r\n    // files 定位缓存\r\n    this.maps = {}\r\n    if (this.files) {\r\n      for (let i = 0; i < this.files.length; i++) {\r\n        let file = this.files[i]\r\n        this.maps[file.id] = file\r\n      }\r\n    }\r\n\r\n    this.$nextTick(function () {\r\n\r\n      // 更新下父级\r\n      if (this.$parent) {\r\n        this.$parent.$forceUpdate()\r\n        // 拖拽渲染\r\n        this.$parent.$nextTick(() => {\r\n          this.watchDrop(this.drop)\r\n        })\r\n      } else {\r\n        // 拖拽渲染\r\n        this.watchDrop(this.drop)\r\n      }\r\n    })\r\n  },\r\n\r\n  /**\r\n   * beforeDestroy\r\n   * @return {[type]} [description]\r\n   */\r\n  beforeDestroy() {\r\n    // 已销毁\r\n    this.destroy = true\r\n\r\n    // 设置成不激活\r\n    this.active = false\r\n\r\n    // 销毁拖拽事件\r\n    this.watchDrop(false)\r\n  },\r\n\r\n  computed: {\r\n    /**\r\n     * uploading 正在上传的线程\r\n     * @return {[type]} [description]\r\n     */\r\n\r\n    /**\r\n     * uploaded 文件列表是否全部已上传\r\n     * @return {[type]} [description]\r\n     */\r\n    uploaded() {\r\n      let file\r\n      for (let i = 0; i < this.files.length; i++) {\r\n        file = this.files[i]\r\n        if (file.fileObject && !file.error && !file.success) {\r\n          return false\r\n        }\r\n      }\r\n      return true\r\n    },\r\n\r\n    chunkOptions () {\r\n      return Object.assign(CHUNK_DEFAULT_OPTIONS, this.chunk)\r\n    },\r\n\r\n    className() {\r\n      return [\r\n        'file-uploads',\r\n        this.features.html5 ? 'file-uploads-html5' : 'file-uploads-html4',\r\n        this.features.directory && this.directory ? 'file-uploads-directory' : undefined,\r\n        this.features.drop && this.drop ? 'file-uploads-drop' : undefined,\r\n        this.disabled ? 'file-uploads-disabled' : undefined,\r\n      ]\r\n    }\r\n  },\r\n\r\n\r\n  watch: {\r\n    active(active) {\r\n      this.watchActive(active)\r\n    },\r\n\r\n    dropActive(value) {\r\n      this.watchDropActive(value)\r\n      if (this.$parent) {\r\n        this.$parent.$forceUpdate()\r\n      }\r\n    },\r\n    \r\n\r\n    drop(value) {\r\n      this.watchDrop(value)\r\n    },\r\n\r\n    value(files) {\r\n      if (this.files === files) {\r\n        return\r\n      }\r\n      this.files = files\r\n\r\n      let oldMaps = this.maps\r\n\r\n      // 重写 maps 缓存\r\n      this.maps = {}\r\n      for (let i = 0; i < this.files.length; i++) {\r\n        let file = this.files[i]\r\n        this.maps[file.id] = file\r\n      }\r\n\r\n      // add, update\r\n      for (let key in this.maps) {\r\n        let newFile = this.maps[key]\r\n        let oldFile = oldMaps[key]\r\n        if (newFile !== oldFile) {\r\n          this.emitFile(newFile, oldFile)\r\n        }\r\n      }\r\n\r\n      // delete\r\n      for (let key in oldMaps) {\r\n        if (!this.maps[key]) {\r\n          this.emitFile(undefined, oldMaps[key])\r\n        }\r\n      }\r\n    },\r\n  },\r\n\r\n  methods: {\r\n\r\n    // 清空\r\n    clear() {\r\n      if (this.files.length) {\r\n        let files = this.files\r\n        this.files = []\r\n\r\n        // 定位\r\n        this.maps = {}\r\n\r\n        // 事件\r\n        this.emitInput()\r\n        for (let i = 0; i < files.length; i++) {\r\n          this.emitFile(undefined, files[i])\r\n        }\r\n      }\r\n      return true\r\n    },\r\n\r\n    // 选择\r\n    get(id) {\r\n      if (!id) {\r\n        return false\r\n      }\r\n\r\n      if (typeof id === 'object') {\r\n        return this.maps[id.id] || false\r\n      }\r\n\r\n      return this.maps[id] || false\r\n    },\r\n\r\n    // 添加\r\n    add(_files, index = this.addIndex) {\r\n      let files = _files\r\n      let isArray = files instanceof Array\r\n\r\n      // 不是数组整理成数组\r\n      if (!isArray) {\r\n        files = [files]\r\n      }\r\n\r\n      // 遍历规范对象\r\n      let addFiles = []\r\n      for (let i = 0; i < files.length; i++) {\r\n        let file = files[i]\r\n        if (this.features.html5 && file instanceof Blob) {\r\n          file = {\r\n            file,\r\n            size: file.size,\r\n            name: file.webkitRelativePath || file.relativePath || file.name || 'unknown',\r\n            type: file.type,\r\n          }\r\n        }\r\n        let fileObject = false\r\n        if (file.fileObject === false) {\r\n          // false\r\n        } else if (file.fileObject) {\r\n          fileObject = true\r\n        } else if (typeof Element !== 'undefined' && file.el instanceof Element) {\r\n          fileObject = true\r\n        } else if (typeof Blob !== 'undefined' && file.file instanceof Blob) {\r\n          fileObject = true\r\n        }\r\n        if (fileObject) {\r\n          file = {\r\n            fileObject: true,\r\n            size: -1,\r\n            name: 'Filename',\r\n            type: '',\r\n            active: false,\r\n            error: '',\r\n            success: false,\r\n            putAction: this.putAction,\r\n            postAction: this.postAction,\r\n            timeout: this.timeout,\r\n            ...file,\r\n            response: {},\r\n\r\n            progress: '0.00',          // 只读\r\n            speed: 0,                  // 只读\r\n            // xhr: false,                // 只读\r\n            // iframe: false,             // 只读\r\n          }\r\n\r\n          file.data = {\r\n            ...this.data,\r\n            ...file.data ? file.data : {},\r\n          }\r\n\r\n          file.headers = {\r\n            ...this.headers,\r\n            ...file.headers ? file.headers : {},\r\n          }\r\n        }\r\n\r\n        // 必须包含 id\r\n        if (!file.id) {\r\n          file.id = Math.random().toString(36).substr(2)\r\n        }\r\n\r\n        if (this.emitFilter(file, undefined)) {\r\n          continue\r\n        }\r\n\r\n        // 最大数量限制\r\n        if (this.maximum > 1 && (addFiles.length + this.files.length) >= this.maximum) {\r\n          break\r\n        }\r\n\r\n        addFiles.push(file)\r\n\r\n        // 最大数量限制\r\n        if (this.maximum === 1) {\r\n          break\r\n        }\r\n      }\r\n\r\n      // 没有文件\r\n      if (!addFiles.length) {\r\n        return false\r\n      }\r\n\r\n      // 如果是 1 清空\r\n      if (this.maximum === 1) {\r\n        this.clear()\r\n      }\r\n\r\n\r\n      // 添加进去 files\r\n      let newFiles\r\n      if (index === true || index === 0) {\r\n        newFiles = addFiles.concat(this.files)\r\n      } else if (index) {\r\n        newFiles = this.files.concat([])\r\n        newFiles.splice(index, 0, ...addFiles)\r\n      } else {\r\n        newFiles = this.files.concat(addFiles)\r\n      }\r\n\r\n      this.files = newFiles\r\n\r\n      // 定位\r\n      for (let i = 0; i < addFiles.length; i++) {\r\n        let file = addFiles[i]\r\n        this.maps[file.id] = file\r\n      }\r\n\r\n      // 事件\r\n      this.emitInput()\r\n      for (let i = 0; i < addFiles.length; i++) {\r\n        this.emitFile(addFiles[i], undefined)\r\n      }\r\n\r\n      return isArray ? addFiles : addFiles[0]\r\n    },\r\n\r\n\r\n\r\n    // 添加表单文件\r\n    addInputFile(el) {\r\n      let files = []\r\n      if (el.files) {\r\n        for (let i = 0; i < el.files.length; i++) {\r\n          let file = el.files[i]\r\n          files.push({\r\n            size: file.size,\r\n            name: file.webkitRelativePath || file.relativePath || file.name,\r\n            type: file.type,\r\n            file,\r\n          })\r\n        }\r\n      } else {\r\n        var names = el.value.replace(/\\\\/g, '/').split('/')\r\n        delete el.__vuex__\r\n        files.push({\r\n          name: names[names.length - 1],\r\n          el,\r\n        })\r\n      }\r\n      return this.add(files)\r\n    },\r\n\r\n\r\n    // 添加 DataTransfer\r\n    addDataTransfer(dataTransfer) {\r\n      let files = []\r\n      if (dataTransfer.items && dataTransfer.items.length) {\r\n        let items = []\r\n        for (let i = 0; i < dataTransfer.items.length; i++) {\r\n          let item = dataTransfer.items[i]\r\n          if (item.getAsEntry) {\r\n            item = item.getAsEntry() || item.getAsFile()\r\n          } else if (item.webkitGetAsEntry) {\r\n            item = item.webkitGetAsEntry() || item.getAsFile()\r\n          } else {\r\n            item = item.getAsFile()\r\n          }\r\n          if (item) {\r\n            items.push(item)\r\n          }\r\n        }\r\n\r\n        return new Promise((resolve, reject) => {\r\n          let forEach = (i) => {\r\n            let item = items[i]\r\n            // 结束 文件数量大于 最大数量\r\n            if (!item || (this.maximum > 0 && files.length >= this.maximum)) {\r\n              return resolve(this.add(files))\r\n            }\r\n            this.getEntry(item).then(function (results) {\r\n              files.push(...results)\r\n              forEach(i + 1)\r\n            })\r\n          }\r\n          forEach(0)\r\n        })\r\n      }\r\n\r\n      if (dataTransfer.files.length) {\r\n        for (let i = 0; i < dataTransfer.files.length; i++) {\r\n          files.push(dataTransfer.files[i])\r\n          if (this.maximum > 0 && files.length >= this.maximum) {\r\n            break\r\n          }\r\n        }\r\n        return Promise.resolve(this.add(files))\r\n      }\r\n\r\n      return Promise.resolve([])\r\n    },\r\n\r\n\r\n    // 获得 entry\r\n    getEntry(entry, path = '') {\r\n      return new Promise((resolve, reject) => {\r\n        if (entry.isFile) {\r\n          entry.file(function (file) {\r\n            resolve([\r\n              {\r\n                size: file.size,\r\n                name: path + file.name,\r\n                type: file.type,\r\n                file,\r\n              }\r\n            ])\r\n          })\r\n        } else if (entry.isDirectory && this.dropDirectory) {\r\n          let files = []\r\n          let dirReader = entry.createReader()\r\n          let readEntries = () => {\r\n            dirReader.readEntries((entries) => {\r\n              let forEach = (i) => {\r\n                if ((!entries[i] && i === 0) || (this.maximum > 0 && files.length >= this.maximum)) {\r\n                  return resolve(files)\r\n                }\r\n                if (!entries[i]) {\r\n                  return readEntries()\r\n                }\r\n                this.getEntry(entries[i], path + entry.name + '/').then((results) => {\r\n                  files.push(...results)\r\n                  forEach(i + 1)\r\n                })\r\n              }\r\n              forEach(0)\r\n            })\r\n          }\r\n          readEntries()\r\n        } else {\r\n          resolve([])\r\n        }\r\n      })\r\n    },\r\n\r\n\r\n    replace(id1, id2) {\r\n      let file1 = this.get(id1)\r\n      let file2 = this.get(id2)\r\n      if (!file1 || !file2 || file1 === file2) {\r\n        return false\r\n      }\r\n      let files = this.files.concat([])\r\n      let index1 = files.indexOf(file1)\r\n      let index2 = files.indexOf(file2)\r\n      if (index1 === -1 || index2 === -1) {\r\n        return false\r\n      }\r\n      files[index1] = file2\r\n      files[index2] = file1\r\n      this.files = files\r\n      this.emitInput()\r\n      return true\r\n    },\r\n\r\n    // 移除\r\n    remove(id) {\r\n      let file = this.get(id)\r\n      if (file) {\r\n        if (this.emitFilter(undefined, file)) {\r\n          return false\r\n        }\r\n        let files = this.files.concat([])\r\n        let index = files.indexOf(file)\r\n        if (index === -1) {\r\n          console.error('remove', file)\r\n          return false\r\n        }\r\n        files.splice(index, 1)\r\n        this.files = files\r\n\r\n        // 定位\r\n        delete this.maps[file.id]\r\n\r\n        // 事件\r\n        this.emitInput()\r\n        this.emitFile(undefined, file)\r\n      }\r\n      return file\r\n    },\r\n\r\n    // 更新\r\n    update(id, data) {\r\n      let file = this.get(id)\r\n      if (file) {\r\n        let newFile = {\r\n          ...file,\r\n          ...data\r\n        }\r\n        // 停用必须加上错误\r\n        if (file.fileObject && file.active && !newFile.active && !newFile.error && !newFile.success) {\r\n          newFile.error = 'abort'\r\n        }\r\n\r\n        if (this.emitFilter(newFile, file)) {\r\n          return false\r\n        }\r\n\r\n        let files = this.files.concat([])\r\n        let index = files.indexOf(file)\r\n        if (index === -1) {\r\n          console.error('update', file)\r\n          return false\r\n        }\r\n        files.splice(index, 1, newFile)\r\n        this.files = files\r\n\r\n        // 删除  旧定位 写入 新定位 （已便支持修改id)\r\n        delete this.maps[file.id]\r\n        this.maps[newFile.id] = newFile\r\n\r\n        // 事件\r\n        this.emitInput()\r\n        this.emitFile(newFile, file)\r\n        return newFile\r\n      }\r\n      return false\r\n    },\r\n\r\n\r\n\r\n    // 预处理 事件 过滤器\r\n    emitFilter(newFile, oldFile) {\r\n      let isPrevent = false\r\n      this.$emit('input-filter', newFile, oldFile, function () {\r\n        isPrevent = true\r\n        return isPrevent\r\n      })\r\n      return isPrevent\r\n    },\r\n\r\n    // 处理后 事件 分发\r\n    emitFile(newFile, oldFile) {\r\n      this.$emit('input-file', newFile, oldFile)\r\n      if (newFile && newFile.fileObject && newFile.active && (!oldFile || !oldFile.active)) {\r\n        this.uploading++\r\n        // 激活\r\n        this.$nextTick(function () {\r\n          setTimeout(() => {\r\n            this.upload(newFile).then(() => {\r\n              // eslint-disable-next-line\r\n              newFile = this.get(newFile)\r\n              if (newFile && newFile.fileObject) {\r\n                this.update(newFile, {\r\n                  active: false,\r\n                  success: !newFile.error\r\n                })\r\n              }\r\n            }).catch((e) => {\r\n              this.update(newFile, {\r\n                active: false,\r\n                success: false,\r\n                error: e.code || e.error || e.message || e\r\n              })\r\n            })\r\n          }, parseInt(Math.random() * 50 + 50, 10))\r\n        })\r\n      } else if ((!newFile || !newFile.fileObject || !newFile.active) && oldFile && oldFile.fileObject && oldFile.active) {\r\n        // 停止\r\n        this.uploading--\r\n      }\r\n\r\n      // 自动延续激活\r\n      if (this.active && (Boolean(newFile) !== Boolean(oldFile) || newFile.active !== oldFile.active)) {\r\n        this.watchActive(true)\r\n      }\r\n    },\r\n\r\n    emitInput() {\r\n      this.$emit('input', this.files)\r\n    },\r\n\r\n\r\n    // 上传\r\n    upload(id) {\r\n      let file = this.get(id)\r\n\r\n      // 被删除\r\n      if (!file) {\r\n        return Promise.reject('not_exists')\r\n      }\r\n\r\n      // 不是文件对象\r\n      if (!file.fileObject) {\r\n        return Promise.reject('file_object')\r\n      }\r\n\r\n      // 有错误直接响应\r\n      if (file.error) {\r\n        return Promise.reject(file.error)\r\n      }\r\n\r\n      // 已完成直接响应\r\n      if (file.success) {\r\n        return Promise.resolve(file)\r\n      }\r\n\r\n      // 后缀\r\n      let extensions = this.extensions\r\n      if (extensions && (extensions.length || typeof extensions.length === 'undefined')) {\r\n        if (typeof extensions !== 'object' || !(extensions instanceof RegExp)) {\r\n          if (typeof extensions === 'string') {\r\n            extensions = extensions.split(',').map(value => value.trim()).filter(value => value)\r\n          }\r\n          extensions = new RegExp('\\.(' + extensions.join('|').replace(/\\./g, '\\\\.') + ')$', 'i')\r\n        }\r\n        if (file.name.search(extensions) === -1) {\r\n          return Promise.reject('extension')\r\n        }\r\n      }\r\n\r\n      // 大小\r\n      if (this.size > 0 && file.size >= 0 && file.size > this.size) {\r\n        return Promise.reject('size')\r\n      }\r\n\r\n      if (this.customAction) {\r\n        return this.customAction(file, this)\r\n      }\r\n\r\n      if (this.features.html5) {\r\n        if (this.shouldUseChunkUpload(file)) {\r\n          return this.uploadChunk(file)\r\n        }\r\n        if (file.putAction) {\r\n          return this.uploadPut(file)\r\n        }\r\n        if (file.postAction) {\r\n          return this.uploadHtml5(file)\r\n        }\r\n      }\r\n      if (file.postAction) {\r\n        return this.uploadHtml4(file)\r\n      }\r\n      return Promise.reject('No action configured')\r\n    },\r\n\r\n    /**\r\n     * Whether this file should be uploaded using chunk upload or not\r\n     *\r\n     * @param Object file\r\n     */\r\n    shouldUseChunkUpload (file) {\r\n      return this.chunkEnabled &&\r\n        !!this.chunkOptions.handler &&\r\n        file.size > this.chunkOptions.minSize\r\n    },\r\n\r\n    /**\r\n     * Upload a file using Chunk method\r\n     *\r\n     * @param File file\r\n     */\r\n    uploadChunk (file) {\r\n      const HandlerClass = this.chunkOptions.handler\r\n      file.chunk = new HandlerClass(file, this.chunkOptions)\r\n\r\n      return file.chunk.upload()\r\n    },\r\n\r\n    uploadPut(file) {\r\n      let querys = []\r\n      let value\r\n      for (let key in file.data) {\r\n        value = file.data[key]\r\n        if (value !== null && value !== undefined) {\r\n          querys.push(encodeURIComponent(key) + '=' + encodeURIComponent(value))\r\n        }\r\n      }\r\n      let queryString = querys.length ? (file.putAction.indexOf('?') === -1 ? '?' : '&') + querys.join('&') : ''\r\n      let xhr = new XMLHttpRequest()\r\n      xhr.open('PUT', file.putAction + queryString)\r\n      return this.uploadXhr(xhr, file, file.file)\r\n    },\r\n\r\n    uploadHtml5(file) {\r\n      let form = new window.FormData()\r\n      let value\r\n      for (let key in file.data) {\r\n        value = file.data[key]\r\n        if (value && typeof value === 'object' && typeof value.toString !== 'function') {\r\n          if (value instanceof File) {\r\n            form.append(key, value, value.name)\r\n          } else {\r\n            form.append(key, JSON.stringify(value))\r\n          }\r\n        } else if (value !== null && value !== undefined) {\r\n          form.append(key, value)\r\n        }\r\n      }\r\n      form.append(this.name, file.file, file.file.filename || file.name)\r\n      let xhr = new XMLHttpRequest()\r\n      xhr.open('POST', file.postAction)\r\n      return this.uploadXhr(xhr, file, form)\r\n    },\r\n\r\n    uploadXhr(xhr, _file, body) {\r\n      let file = _file\r\n      let speedTime = 0\r\n      let speedLoaded = 0\r\n\r\n      // 进度条\r\n      xhr.upload.onprogress = (e) => {\r\n        // 还未开始上传 已删除 未激活\r\n        file = this.get(file)\r\n        if (!e.lengthComputable || !file || !file.fileObject || !file.active) {\r\n          return\r\n        }\r\n\r\n        // 进度 速度 每秒更新一次\r\n        let speedTime2 = Math.round(Date.now() / 1000)\r\n        if (speedTime2 === speedTime) {\r\n          return\r\n        }\r\n        speedTime = speedTime2\r\n\r\n        file = this.update(file, {\r\n          progress: (e.loaded / e.total * 100).toFixed(2),\r\n          speed: e.loaded - speedLoaded,\r\n        })\r\n        speedLoaded = e.loaded\r\n      }\r\n\r\n      // 检查激活状态\r\n      let interval = setInterval(() => {\r\n        file = this.get(file)\r\n        if (file && file.fileObject && !file.success && !file.error && file.active) {\r\n          return\r\n        }\r\n\r\n        if (interval) {\r\n          clearInterval(interval)\r\n          interval = false\r\n        }\r\n\r\n        try {\r\n          xhr.abort()\r\n          xhr.timeout = 1\r\n        } catch (e) {\r\n        }\r\n      }, 100)\r\n\r\n      return new Promise((resolve, reject) => {\r\n        let complete\r\n        let fn = (e) => {\r\n          // 已经处理过了\r\n          if (complete) {\r\n            return\r\n          }\r\n          complete = true\r\n          if (interval) {\r\n            clearInterval(interval)\r\n            interval = false\r\n          }\r\n\r\n          file = this.get(file)\r\n\r\n          // 不存在直接响应\r\n          if (!file) {\r\n            return reject('not_exists')\r\n          }\r\n\r\n          // 不是文件对象\r\n          if (!file.fileObject) {\r\n            return reject('file_object')\r\n          }\r\n\r\n          // 有错误自动响应\r\n          if (file.error) {\r\n            return reject(file.error)\r\n          }\r\n\r\n          // 未激活\r\n          if (!file.active) {\r\n            return reject('abort')\r\n          }\r\n\r\n\r\n          // 已完成 直接相应\r\n          if (file.success) {\r\n            return resolve(file)\r\n          }\r\n\r\n          let data = {}\r\n\r\n          switch (e.type) {\r\n            case 'timeout':\r\n            case 'abort':\r\n              data.error = e.type\r\n              break\r\n            case 'error':\r\n              if (!xhr.status) {\r\n                data.error = 'network'\r\n              } else if (xhr.status >= 500) {\r\n                data.error = 'server'\r\n              } else if (xhr.status >= 400) {\r\n                data.error = 'denied'\r\n              }\r\n              break\r\n            default:\r\n              if (xhr.status >= 500) {\r\n                data.error = 'server'\r\n              } else if (xhr.status >= 400) {\r\n                data.error = 'denied'\r\n              } else {\r\n                data.progress = '100.00'\r\n              }\r\n          }\r\n\r\n          if (xhr.responseText) {\r\n            let contentType = xhr.getResponseHeader('Content-Type')\r\n            if (contentType && contentType.indexOf('/json') !== -1) {\r\n              data.response = JSON.parse(xhr.responseText)\r\n            } else {\r\n              data.response = xhr.responseText\r\n            }\r\n          }\r\n\r\n          // 更新\r\n          file = this.update(file, data)\r\n\r\n          // 相应错误\r\n          if (file.error) {\r\n            return reject(file.error)\r\n          }\r\n\r\n          // 响应\r\n          return resolve(file)\r\n        }\r\n\r\n        // 事件\r\n        xhr.onload = fn\r\n        xhr.onerror = fn\r\n        xhr.onabort = fn\r\n        xhr.ontimeout = fn\r\n\r\n        // 超时\r\n        if (file.timeout) {\r\n          xhr.timeout = file.timeout\r\n        }\r\n\r\n        // headers\r\n        for (let key in file.headers) {\r\n          xhr.setRequestHeader(key, file.headers[key])\r\n        }\r\n\r\n        // 更新 xhr\r\n        file = this.update(file, { xhr })\r\n\r\n        // 开始上传\r\n        xhr.send(body)\r\n      })\r\n    },\r\n\r\n\r\n\r\n\r\n    uploadHtml4(_file) {\r\n      let file = _file\r\n      let onKeydown = function (e) {\r\n        if (e.keyCode === 27) {\r\n          e.preventDefault()\r\n        }\r\n      }\r\n\r\n      let iframe = document.createElement('iframe')\r\n      iframe.id = 'upload-iframe-' + file.id\r\n      iframe.name = 'upload-iframe-' + file.id\r\n      iframe.src = 'about:blank'\r\n      iframe.setAttribute('style', 'width:1px;height:1px;top:-999em;position:absolute; margin-top:-999em;')\r\n\r\n\r\n      let form = document.createElement('form')\r\n\r\n      form.action = file.postAction\r\n\r\n      form.name = 'upload-form-' + file.id\r\n\r\n\r\n      form.setAttribute('method', 'POST')\r\n      form.setAttribute('target', 'upload-iframe-' + file.id)\r\n      form.setAttribute('enctype', 'multipart/form-data')\r\n\r\n      let value\r\n      let input\r\n      for (let key in file.data) {\r\n        value = file.data[key]\r\n        if (value && typeof value === 'object' && typeof value.toString !== 'function') {\r\n          value = JSON.stringify(value)\r\n        }\r\n        if (value !== null && value !== undefined) {\r\n          input = document.createElement('input')\r\n          input.type = 'hidden'\r\n          input.name = key\r\n          input.value = value\r\n          form.appendChild(input)\r\n        }\r\n      }\r\n      form.appendChild(file.el)\r\n\r\n      document.body.appendChild(iframe).appendChild(form)\r\n\r\n\r\n\r\n\r\n      let getResponseData = function () {\r\n        let doc\r\n        try {\r\n          if (iframe.contentWindow) {\r\n            doc = iframe.contentWindow.document\r\n          }\r\n        } catch (err) {\r\n        }\r\n        if (!doc) {\r\n          try {\r\n            doc = iframe.contentDocument ? iframe.contentDocument : iframe.document\r\n          } catch (err) {\r\n            doc = iframe.document\r\n          }\r\n        }\r\n        if (doc && doc.body) {\r\n          return doc.body.innerHTML\r\n        }\r\n        return null\r\n      }\r\n\r\n\r\n      return new Promise((resolve, reject) => {\r\n        setTimeout(() => {\r\n          file = this.update(file, { iframe })\r\n\r\n          // 不存在\r\n          if (!file) {\r\n            return reject('not_exists')\r\n          }\r\n\r\n          // 定时检查\r\n          let interval = setInterval(() => {\r\n            file = this.get(file)\r\n            if (file && file.fileObject && !file.success && !file.error && file.active) {\r\n              return\r\n            }\r\n\r\n            if (interval) {\r\n              clearInterval(interval)\r\n              interval = false\r\n            }\r\n\r\n            iframe.onabort({ type: file ? 'abort' : 'not_exists' })\r\n          }, 100)\r\n\r\n\r\n          let complete\r\n          let fn = (e) => {\r\n            // 已经处理过了\r\n            if (complete) {\r\n              return\r\n            }\r\n            complete = true\r\n\r\n\r\n            if (interval) {\r\n              clearInterval(interval)\r\n              interval = false\r\n            }\r\n\r\n            // 关闭 esc 事件\r\n            document.body.removeEventListener('keydown', onKeydown)\r\n\r\n            file = this.get(file)\r\n\r\n            // 不存在直接响应\r\n            if (!file) {\r\n              return reject('not_exists')\r\n            }\r\n\r\n            // 不是文件对象\r\n            if (!file.fileObject) {\r\n              return reject('file_object')\r\n            }\r\n\r\n            // 有错误自动响应\r\n            if (file.error) {\r\n              return reject(file.error)\r\n            }\r\n\r\n            // 未激活\r\n            if (!file.active) {\r\n              return reject('abort')\r\n            }\r\n\r\n            // 已完成 直接相应\r\n            if (file.success) {\r\n              return resolve(file)\r\n            }\r\n\r\n            let response = getResponseData()\r\n            let data = {}\r\n            switch (e.type) {\r\n              case 'abort':\r\n                data.error = 'abort'\r\n                break\r\n              case 'error':\r\n                if (file.error) {\r\n                  data.error = file.error\r\n                } else if (response === null) {\r\n                  data.error = 'network'\r\n                } else {\r\n                  data.error = 'denied'\r\n                }\r\n                break\r\n              default:\r\n                if (file.error) {\r\n                  data.error = file.error\r\n                } else if (data === null) {\r\n                  data.error = 'network'\r\n                } else {\r\n                  data.progress = '100.00'\r\n                }\r\n            }\r\n\r\n            if (response !== null) {\r\n              if (response && response.substr(0, 1) === '{' && response.substr(response.length - 1, 1) === '}') {\r\n                try {\r\n                  response = JSON.parse(response)\r\n                } catch (err) {\r\n                }\r\n              }\r\n              data.response = response\r\n            }\r\n\r\n            // 更新\r\n            file = this.update(file, data)\r\n\r\n            if (file.error) {\r\n              return reject(file.error)\r\n            }\r\n\r\n            // 响应\r\n            return resolve(file)\r\n          }\r\n\r\n\r\n          // 添加事件\r\n          iframe.onload = fn\r\n          iframe.onerror = fn\r\n          iframe.onabort = fn\r\n\r\n\r\n          // 禁止 esc 键\r\n          document.body.addEventListener('keydown', onKeydown)\r\n\r\n          // 提交\r\n          form.submit()\r\n        }, 50)\r\n      }).then(function (res) {\r\n        iframe.parentNode && iframe.parentNode.removeChild(iframe)\r\n        return res\r\n      }).catch(function (res) {\r\n        iframe.parentNode && iframe.parentNode.removeChild(iframe)\r\n        return res\r\n      })\r\n    },\r\n\r\n\r\n\r\n    watchActive(active) {\r\n      let file\r\n      let index = 0\r\n      while ((file = this.files[index])) {\r\n        index++\r\n        if (!file.fileObject) {\r\n          // 不是文件对象\r\n        } else if (active && !this.destroy) {\r\n          if (this.uploading >= this.thread || (this.uploading && !this.features.html5)) {\r\n            break\r\n          }\r\n          if (!file.active && !file.error && !file.success) {\r\n            this.update(file, { active: true })\r\n          }\r\n        } else {\r\n          if (file.active) {\r\n            this.update(file, { active: false })\r\n          }\r\n        }\r\n      }\r\n      if (this.uploading === 0) {\r\n        this.active = false\r\n      }\r\n    },\r\n\r\n\r\n    watchDrop(_el) {\r\n      let el = _el\r\n      if (!this.features.drop) {\r\n        return\r\n      }\r\n\r\n      // 移除挂载\r\n      if (this.dropElement) {\r\n        try {\r\n          document.removeEventListener('dragenter', this.onDocumentDragenter, false)\r\n          document.removeEventListener('dragleave', this.onDocumentDragleave, false)\r\n          document.removeEventListener('dragover', this.onDocumentDragover, false)\r\n          document.removeEventListener('drop', this.onDocumentDrop, false)\r\n          this.dropElement.removeEventListener('dragover', this.onDragover, false)\r\n          this.dropElement.removeEventListener('drop', this.onDrop, false)\r\n        } catch (e) {\r\n        }\r\n      }\r\n\r\n      if (!el) {\r\n        el = false\r\n      } else if (typeof el === 'string') {\r\n        el = document.querySelector(el) || this.$root.$el.querySelector(el)\r\n      } else if (el === true) {\r\n        el = this.$parent.$el\r\n      }\r\n\r\n      this.dropElement = el\r\n\r\n      if (this.dropElement) {\r\n        document.addEventListener('dragenter', this.onDocumentDragenter, false)\r\n        document.addEventListener('dragleave', this.onDocumentDragleave, false)\r\n        document.addEventListener('dragover', this.onDocumentDragover, false)\r\n        document.addEventListener('drop', this.onDocumentDrop, false)\r\n        this.dropElement.addEventListener('dragover', this.onDragover, false)\r\n        this.dropElement.addEventListener('drop', this.onDrop, false)\r\n      }\r\n    },\r\n\r\n    watchDropActive(newDropActive, oldDropActive) {\r\n      if (newDropActive === oldDropActive) {\r\n        return\r\n      }\r\n      if (this.dropTimeout) {\r\n        clearTimeout(this.dropTimeout)\r\n        this.dropTimeout = null\r\n      }\r\n      if (newDropActive) {\r\n        this.dropTimeout = setTimeout(this.onDocumentDrop, 1000);\r\n      }\r\n    },\r\n\r\n\r\n    onDocumentDragenter(e) {\r\n      if (this.dropActive) {\r\n        return\r\n      }\r\n      if (!e.dataTransfer) {\r\n        return\r\n      }\r\n      let dt = e.dataTransfer\r\n      if (dt.files && dt.files.length) {\r\n        this.dropActive = true\r\n      } else if (!dt.types) {\r\n        this.dropActive = true\r\n      } else if (dt.types.indexOf && dt.types.indexOf('Files') !== -1) {\r\n        this.dropActive = true\r\n      } else if (dt.types.contains && dt.types.contains('Files')) {\r\n        this.dropActive = true\r\n      }\r\n      if (this.dropActive) {\r\n        this.watchDropActive(true)\r\n      }\r\n    },\r\n\r\n    onDocumentDragleave(e) {\r\n      if (!this.dropActive) {\r\n        return\r\n      }\r\n      if (e.target === e.explicitOriginalTarget || (!e.fromElement && (e.clientX <= 0 || e.clientY <= 0 || e.clientX >= window.innerWidth || e.clientY >= window.innerHeight))) {\r\n        this.dropActive = false\r\n        this.watchDropActive(false)\r\n      }\r\n    },\r\n\r\n    onDocumentDragover() {\r\n      this.watchDropActive(true)\r\n    },\r\n\r\n    onDocumentDrop() {\r\n      this.dropActive = false\r\n      this.watchDropActive(false)\r\n    },\r\n\r\n    onDragover(e) {\r\n      e.preventDefault()\r\n    },\r\n\r\n\r\n    onDrop(e) {\r\n      e.preventDefault()\r\n      e.dataTransfer && this.addDataTransfer(e.dataTransfer)\r\n    },\r\n  }\r\n}\r\n</script>\r\n","'use strict';\n\nvar isOldIE = typeof navigator !== 'undefined' && /msie [6-9]\\\\b/.test(navigator.userAgent.toLowerCase());\nfunction createInjector(context) {\n  return function (id, style) {\n    return addStyle(id, style);\n  };\n}\nvar HEAD = document.head || document.getElementsByTagName('head')[0];\nvar styles = {};\n\nfunction addStyle(id, css) {\n  var group = isOldIE ? css.media || 'default' : id;\n  var style = styles[group] || (styles[group] = {\n    ids: new Set(),\n    styles: []\n  });\n\n  if (!style.ids.has(id)) {\n    style.ids.add(id);\n    var code = css.source;\n\n    if (css.map) {\n      // https://developer.chrome.com/devtools/docs/javascript-debugging\n      // this makes source maps inside style tags work properly in Chrome\n      code += '\\n/*# sourceURL=' + css.map.sources[0] + ' */'; // http://stackoverflow.com/a/26603875\n\n      code += '\\n/*# sourceMappingURL=data:application/json;base64,' + btoa(unescape(encodeURIComponent(JSON.stringify(css.map)))) + ' */';\n    }\n\n    if (!style.element) {\n      style.element = document.createElement('style');\n      style.element.type = 'text/css';\n      if (css.media) style.element.setAttribute('media', css.media);\n      HEAD.appendChild(style.element);\n    }\n\n    if ('styleSheet' in style.element) {\n      style.styles.push(code);\n      style.element.styleSheet.cssText = style.styles.filter(Boolean).join('\\n');\n    } else {\n      var index = style.ids.size - 1;\n      var textNode = document.createTextNode(code);\n      var nodes = style.element.childNodes;\n      if (nodes[index]) style.element.removeChild(nodes[index]);\n      if (nodes.length) style.element.insertBefore(textNode, nodes[index]);else style.element.appendChild(textNode);\n    }\n  }\n}\n\nmodule.exports = createInjector;\n//# sourceMappingURL=browser.js.map\n"],"names":["createRequest","options","xhr","XMLHttpRequest","open","method","url","responseType","headers","keys","forEach","setRequestHeader","key","body","Promise","resolve","reject","onload","status","response","JSON","parse","err","onerror","send","stringify","ChunkUploadHandler","file","chunks","sessionId","chunkSize","speedInterval","start","end","this","fileSize","push","slice","maxRetries","progress","active","stopChunks","chunksUploading","abort","stopSpeedCalc","startChunking","promise","Object","assign","action","startBody","fileType","fileName","then","res","_this2","data","session_id","end_offset","createChunks","catch","i","maxActiveChunks","uploadNextChunk","startSpeedCalc","hasChunksToUpload","uploadChunk","chunksToUpload","length","finish","chunk","updateFileProgress","upload","addEventListener","evt","lengthComputable","Math","round","loaded","total","FormData","name","append","uploadBody","startOffset","blob","uploaded","retries","_this3","finishBody","_this4","lastUploadedBytes","speed","window","setInterval","uploadedBytes","_this5","clearInterval","parseInt","maxActive","type","size","completedProgress","chunksUploaded","uploadingProgress","reduce","_this6","min","filter","template","style","script","scopeId","isFunctionalTemplate","moduleIdentifier","shadowMode","createInjector","createInjectorSSR","createInjectorShadow","hook","render","staticRenderFns","_compiled","functional","_scopeId","context","$vnode","ssrContext","parent","__VUE_SSR_CONTEXT__","call","_registeredComponents","add","_ssrRegister","$root","$options","shadowRoot","originalRender","h","existing","beforeCreate","concat","isOldIE","navigator","test","userAgent","toLowerCase","HEAD","document","head","getElementsByTagName","styles","id","css","group","media","Set","ids","has","code","source","map","sources","btoa","unescape","encodeURIComponent","element","createElement","setAttribute","appendChild","styleSheet","cssText","Boolean","join","index","textNode","createTextNode","nodes","childNodes","removeChild","insertBefore","addStyle"],"mappings":"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"}